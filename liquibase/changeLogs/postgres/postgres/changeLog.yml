databaseChangeLog:
  - preConditions:
    - dbms:
        type: postgresql
    - runningAs:
        username: postgres

  - changeSet:
      author: drsteini
      id: "create.project.owner.role.${dataOwner}"
      preConditions:
        - onFail: MARK_RAN
        - onError: HALT
        - sqlCheck:
            expectedResult: 0
            sql: select count(*) from pg_roles where rolname = '${dataOwner}';
      changes:
        - sql: create role ${dataOwner} with login password '${DATA_OWNER_PASSWORD}';
        - rollback: drop role if exists ${dataOwner};

  - changeSet:
      author: mbucknel
      id: "grant.${dataOwner}.to.postgres"
      changes:
        - sql: grant ${dataOwner} to postgres;
        - rollback: revoke ${dataOwner} from postgres;

  - changeSet:
      author: drsteini
      id: "create.project.user.role.${readOnlyUser}"
      preConditions:
        - onFail: MARK_RAN
        - onError: HALT
        - sqlCheck:
            expectedResult: 0
            sql: select count(*) from pg_roles where rolname = '${readOnlyUser}';
      changes:
        - sql: create role ${readOnlyUser} with login password '${READ_ONLY_USER_PASSWORD}';
        - rollback: drop role if exists ${readOnlyUser};

  - changeSet:
      author: drsteini
      id: "create.project.database.${DATABASE_NAME}"
      preConditions:
        - onFail: MARK_RAN
        - onError: HALT
        - sqlCheck:
            expectedResult: 0
            sql: select count(*) from pg_database where datname = '${DATABASE_NAME}';
      runInTransaction: false
      changes:
        - sql: create database ${DATABASE_NAME} with owner = ${dataOwner};
        - rollback: drop database if exists ${DATABASE_NAME};

  - changeSet:
      author: drsteini
      id: "alter.database.${DATABASE_NAME}.search_path"
      changes:
        - sql: alter database ${DATABASE_NAME} set search_path = "$user", ${dataOwner}, public, tiger;
        - rollback: alter database ${DATABASE_NAME} reset search_path;
